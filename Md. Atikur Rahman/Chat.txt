A.

SELECT
    FNAME || ' ' || LNAME AS Full_Name
FROM
    SCORE_CARD
WHERE
    SCORE > 75
ORDER BY
    SUBSTR(FNAME, LENGTH(FNAME) - 2) ASC,
    ID ASC;

B
SELECT
    S.RegNo,
    S.StudentName,
    COALESCE(ScoreTable.Score, 0) AS AvailedScore
FROM
    STUDENTS AS S
LEFT JOIN
    SCORE AS ScoreTable
ON
    S.RegNo = ScoreTable.RegNo
ORDER BY
    AvailedScore DESC;



SELECT
    FULL_NAME AS Employee_Name,
    DUE_MONTH * MONTHLY_SALARY AS Dues
FROM
    DUE_DETAILS
ORDER BY
    Dues DESC
FETCH FIRST 3 ROWS ONLY;




D
-- Create the STUDENTS table
CREATE TABLE STUDENTS (
    ID NUMBER(5) NOT NULL,
    REGNO VARCHAR(10),
    STUDENT_NAME VARCHAR(100) NOT NULL,
    ENROLL_YEAR NUMBER(4) NOT NULL,
    PRIMARY KEY (ID),
    UNIQUE (REGNO)
);

-- Create the SCORE table
CREATE TABLE SCORE (
    ID NUMBER(5) NOT NULL,
    SCORE NUMBER(3) NOT NULL,
    FOREIGN KEY (ID) REFERENCES STUDENTS(ID)
);







E

DELIMITER //

CREATE PROCEDURE InsertOrUpdateStudent(
    IN p_ID INT,
    IN p_REGNO VARCHAR(10),
    IN p_STUDENT_NAME VARCHAR(255),
    IN p_ENROLL_YEAR INT
)
BEGIN
    DECLARE existing_id INT;

    -- Check if the provided ID already exists in the STUDENTS table
    SELECT ID INTO existing_id FROM STUDENTS WHERE ID = p_ID;

    IF existing_id IS NULL THEN
        -- ID does not exist, so INSERT a new record
        INSERT INTO STUDENTS (ID, REGNO, STUDENT_NAME, ENROLL_YEAR)
        VALUES (p_ID, p_REGNO, p_STUDENT_NAME, p_ENROLL_YEAR);
    ELSE
        -- ID already exists, so UPDATE the existing record
        UPDATE STUDENTS
        SET REGNO = p_REGNO,
            STUDENT_NAME = p_STUDENT_NAME,
            ENROLL_YEAR = p_ENROLL_YEAR
        WHERE ID = p_ID;
    END IF;
END //

DELIMITER ;

